<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | My Delusional Dream]]></title>
  <link href="http://patrick.wagstrom.net/weblog/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://patrick.wagstrom.net/weblog/"/>
  <updated>2012-05-12T20:51:14-04:00</updated>
  <id>http://patrick.wagstrom.net/weblog/</id>
  <author>
    <name><![CDATA[Patrick Wagstrom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Textile Markup in Trac]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2009/12/06/textile-markup-in-trac/"/>
    <updated>2009-12-06T19:46:57-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2009/12/06/textile-markup-in-trac</id>
    <content type="html"><![CDATA[<p>For a new secret project I’ve been putting together an installation of Trac to provide a web interface for task management. I found myself wanting to create a nice looking table within a Trac wiki page to document different dependencies needed by the software. In a normal installation there are three different ways to do this:</p>

<h2>Trac’s Wiki Formatting</h2>

<p>This is probably the simplest option, however it’s also the most limiting, there is no way to provide additional styling to elements and you can’t create columns that span multiple rows or columns.  The lack of additional styling is particularly difficult because you can’t correct it easily with CSS without modifying all of the tables.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='moin'><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Client Side Packages<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Package<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>License<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Purpose<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://jquery.com/</span><span class="s"> jQuery</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://docs.jquery.com/Licensing</span><span class="s"> MIT or GPL</span><span class="k">]</span> (choice) <span class="c">||</span> General Purpose javascript <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://raphaeljs.com/</span><span class="s"> Raphaël</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://raphaeljs.com</span><span class="s"> MIT</span><span class="k">]</span> (see sidebar) <span class="c">||</span> Vector graphics library <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Server Side Packages<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://www.djangoproject.com/</span><span class="s"> Django</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://code.djangoproject.com/browser/django/trunk/LICENSE</span><span class="s"> BSD</span><span class="k">]</span> <span class="c">||</span> Server framework <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://pinaxproject.com/</span><span class="s"> Pinax</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://github.com/pinax/pinax/blob/master/LICENSE</span><span class="s"> MIT</span><span class="k">]</span> <span class="c">||</span> Server social components <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://www.sqlite.org/</span><span class="s"> SQLite</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://www.sqlite.org/copyright.html</span><span class="s"> Public Domain</span><span class="k">]</span> <span class="c">||</span> Server database <span class="c">||</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/trac-table.png">
		<figcaption>Table output using Trac Wiki Processing </figcaption>
	</figure></notextile></div></p>

<h2>HTML</h2>

<p>HTML is of course, the go to for all of this.  However, the whole reason I started looking at this is that I didn’t want to embed a huge chunk of HTML into my wiki page.  I know I can do all the formatting I want, but this really isn’t an option.</p>

<h2>ReStructured Text</h2>

<p>ReStructured Text is the preferred markup language of Python documentation.  It’s more robust than Trac Wiki formatting, especially for tables.  The processor for ReStructured Text in Trac is smart enough to tag tables with the class ‘docutils’ which helps out immensely when trying to style the documents.  This allows for the creation of some prettier tables.  It also allows the creation of header columns and multi-column/row cells.  However, it’s not great for this sort of general purpose document, for two reasons.  First,  it doesn’t allow for a header row to appear in the middle of the table.  I’d really like these to be part of the same table.  Secondly, you can’t have multiple short links with the same name.  So, I can have the name ‘MIT’ link to two different pages without doing implicit links.  However, this introduces a new third problem, which is that table cells are proportional in width to the RST equivalent.  Here’s the sample table structured in RST:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rest'><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Client Side Packages                                                                                             |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Package      | License                                                              | Purpose                    |
</span><span class='line'>+==============+======================================================================+============================+
</span><span class='line'><span class="o">|</span> jQuery&lt;em&gt;      | &lt;code&gt;MIT or GPL &amp;lt;http://docs.jquery.com/Licensing&amp;gt;&lt;/code&gt;__ (choice)           | General JavaScript library |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Raphaël&lt;/em&gt;     | &lt;code&gt;MIT &amp;lt;http://raphaeljs.com/&amp;gt;&lt;/code&gt;__ (see sidebar)                        | SVG/VML Library            |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Server Side Packages                                                                                            |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Package      | License                                                              | Purpose                   |
</span><span class='line'>+==============+======================================================================+===========================+
</span><span class='line'><span class="o">|</span> Django&lt;em&gt;      | &lt;code&gt;BSD &amp;lt;http://code.djangoproject.com/browser/django/trunk/LICENSE&amp;gt;&lt;/code&gt;__ | Server framework          |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Pinax&lt;/em&gt;       | &lt;code&gt;MIT &amp;lt;http://github.com/pinax/pinax/blob/master/LICENSE&amp;gt;&lt;/code&gt;&lt;strong&gt;          | Server social components  |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> SQLite_      | &lt;code&gt;Public Domain &amp;lt;http://www.sqlite.org/copyright.html&amp;gt;&lt;/code&gt;&lt;/strong&gt;             | Server database           |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>.. &lt;em&gt;jQuery: http://jquery.com/
</span><span class='line'><span class="cp">.. &lt;/em&gt;Raphaël: http://raphaeljs.com/</span>
</span><span class='line'><span class="cp">.. &lt;em&gt;Django: http://www.djangoproject.com/</span>
</span><span class='line'><span class="cp">.. &lt;/em&gt;Pinax: http://pinaxproject.com/</span>
</span><span class='line'><span class="p">..</span> <span class="nt">_SQLite:</span> http://www.sqlite.org/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, this results in tables that are unnaturally wide and must be split into two different tables.  While the result is passable, especially after throwing down some CSS to help out and collapse those ugly borders, the width of the tables makes them look highly awkward, and therefor unacceptable.</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/rst-table.png">
		<figcaption>Output using ReStructured Text </figcaption>
	</figure></notextile></div></p>

<h2>Markdown</h2>

<p>Markdown is the hotness markup language that all of the web 3.0 kiddies like to use. And why not?  It’s from John Gruber, macboy extraordinairre!  Markdown is designed to be wholly readable without people needing to know how to speak HTML.  It’s quick and easy to use.  There’s a pretty good markdown processor available for Trac.  However, there are a few shortcomings.  First, by default Markdown has no support for tables, so you’ll need to drop back to HTML for the formatting.  This is less than ideal as it’s messy again.  Furthermore you cannot use Markdown inside of an HTML table.</p>

<p>Fortunately, there are some extensions to Markdown that provide support for tables.  As is normal for this sort of community, it’s been further extended to allow for all sorts of crazy formatting and alignment issues.  However, as near as I can tell it still does not allow cells to span multiple columns/rows.  Or, if it does, the Markdown plugin for Trac doesn’t support it.  I didn’t really get far enough to generate anything really interesting with Markdown.</p>

<h2>Textile</h2>

<p>In the world of Web 2.0 fanboys, the other competing markup, favored by the Ruby guys and folks at GitHub, is Textile.  It’s slightly similar to Markdown, in that it aims to be fairly readable, but advanced features let you do neat stuff at the expense of some readability.  Fortunately, using Textile I was able to make the table look exactly like I wanted to.  Although Textile allows you to use multiple header rows, I did have to apply some simple CSS styling to the header columns and rows.  Here’s the Textile I used.</p>

<p>Liquid error: ClassNotFound: no lexer for alias 'textile' found</p>

<p>And here is the actual output from Trac after rendering the Textile (after a little bit of help from some CSS:</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/textile-table.png">
		<figcaption>Table output using Textile processor </figcaption>
	</figure></notextile></div></p>

<h2>Trac Textile Macro</h2>

<p>To get this far I needed to write a simple little Trac processing macro for Textile. Using information from the excellent Markdown Macro I was able to hack together a simple Textile Macro for Trac.  Before installing it you’ll need to install the Python Textile libraries.  Then, you can clone the git repository from git://github.com/pridkett/tractextilemacro.git.  From here you can install it like a normal Trac component.  Enable it in your trac.ini using these lines:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[components]
</span><span class='line'>Textile.* = enabled</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, just embed your Textile code in a block like this and you’ll be
on your way. Remove the double backslashes at the top of the block,
they're only there because otherwise Octopress chokes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\{\{\{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!Textile&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Hello from the &lt;strong>magical&lt;/strong> land of "Textile":http://textile.thresholdstate.com/!
</span><span class='line'>}}}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shutting Down PennAve]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2009/11/25/shutting-down-pennave/"/>
    <updated>2009-11-25T14:10:52-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2009/11/25/shutting-down-pennave</id>
    <content type="html"><![CDATA[<p>Several years ago I created a nifty little photo gallery webapp for <a href="http://f-spot.org/Main_Page">F-Spot</a> users called <a href="https://secure.wagstrom.net/projects/pennave">PennAve</a>.  PennAve was designed to be incredibly simple in its use: Tag a set a photos in F-Spot as "Public", copy the database to your web server, and boom, those photos would be displayed.  It was quite simple and just worked, well for the most part.</p>

<p>However, in the design of PennAve I made a couple of critical errors and since that point the marketplace has changed significantly.  Some of these are issues that I should have be more aware of, other ones I couldn't have anticipated.</p>

<h3>Issue 1: XML? What was I thinking‽</h3>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/11/xsltdisaster.png">
		<figcaption>At what point did I think that code like this would be a good idea? </figcaption>
	</figure></notextile></div></p>

<p>At the time I was all hyped up on the XML goofballs and believed that making the whole thing styleable using client side XSLT would be an awesome idea.  It was just really neat that I could send an XML document and Firefox could transform it.  Think of the other clients I could use to slurp that data with little effort! In retrospect, trying to do any sort of significant styling using XSLT makes me feel like I'm slowly driving an ice pick into my head.  The clean syntax of XML gives way to the disaster of XSLT, templates, variables, and overly verbose syntax.</p>

<h3>Issue 2: Strange dependencies and poor documentation.</h3>

<p>PennAve required things like <a href="http://www.cherrypy.org">CherryPy</a> and <a href="http://sqlobject.org/">SQLObject</a> (for a while it even required a SVN version of SQLObject, scary, eh?).  Folks know how to install a PHP script, they can probably figure out how to run a Django app.  Trying to explain to everyone how to compile <a href="http://code.google.com/p/modwsgi/">mod_wsgi</a> so they could run PennAve in the web server, or use <a href="http://httpd.apache.org/docs/2.0/mod/mod_proxy.html">mod_proxy</a> to redirect to CherryPy's internal web server was a big pain.  I sought to make it really easy to create your galleries, but the installation bordered on insanity for some users.</p>

<h3>Issue 3: Slow development of F-Spot.</h3>

<p>I don't use F-Spot that much anymore.  I have most of my collection tagged and edited (more than 800 different tags), so I just pop in when I need to import some new photos.  However, while F-Spot was pretty good four years ago, its development is slow enough that numerous other solutions make it look ancient.  The tools for editing photos are slightly substandard. It doesn't have face detection. It is sometimes prone to crashing. I'm not trying to blame Stephane Delcroix (the maintainer of F-Spot) for these problems, but that's the reality of a project that only has a small community.  Perhaps these will change with <a href="http://www.omgubuntu.co.uk/2009/11/gimp-to-be-removed-lucid.html">Ubuntu's decision to make F-Spot the default instead of GIMP</a>, but that's a little uncertain.</p>

<h3>Issue 4: Cheap online storage</h3>

<p>Google recently announced that you could get 20GB of storage for $5/yr.  That's cheap enough that you can easily manage your entire collection online.  $20 for 80GB of storage without having to worry about bandwidth and server costs is a godsend.  Reduction in prices for Flickr also affect this.</p>

<h3>Issue 5: The Awesomeness of Face Detection</h3>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/11/mugshots.jpg">
		<figcaption>Not even my ugly mug could break Picasa's face detection </figcaption>
	</figure></notextile></div></p>

<p>F-Spot has a default category of people where you can create a tag for each person.  However, this merely associates the photo with a person, not an area of a photo with a person.  Using face detection you can find people in all your photos, many times automatically.  For example, I've found cases where I had photos of friends from before I became friends with them.  When I put these photos in F-Spot I didn't tag those photos, but now I'd like to do that.  Face detection takes care of that with no interaction from me.</p>

<h3>Issue 6: Geotagging</h3>

<p>Once again, F-Spot has a default category of places.  I carefully created a hierarchy of locations so I could quickly find all of my photos taken in Pittsburgh, or Pennsylvania, etc.  However, it's much better if photos can say exactly where they're taken, which is where geotagging is helpful.  Photos from my iPhone already are geotagged and the integration of Picasa with Google Earth and Google Maps makes it dreadfully simple to tag all of my other photos.</p>

<p>Independently none of these issues was bad enough to cause me to stop development, but in sum, they're huge.  I never started PennAve to get hordes of fans, mainly I needed a way to show my own photos and if a few other people might find it useful, that would be great.  I'm pleased that a handful of other people have found PennAve useful, but times change and it's time to move on.  Therefore, I'm declaring officially that I'm stopping development on PennAve.  I'll keep the site up for the reasonable future, but I won't make efforts to update the software or ensure the website stays operational indefinitely.  Thanks for all the help from everyone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[24 Hour Blog Challenge Update]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2008/01/05/24hrblogchallenge-update/"/>
    <updated>2008-01-05T15:41:00-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2008/01/05/24hrblogchallenge-update</id>
    <content type="html"><![CDATA[<p>First of all, I cheated a little, it's been 24 hours and 51 minutes since I started my little challenge yesterday afternoon.  I started with no code written, no database schema, and no HTML templates.  As of right now, I have a system that has accomplished all of the goals set forth in the original <a href="/weblog/code/24hrBlogChallenge/">24 Hour Blog Challenge</a> post, but is really ugly.  Along the way, I also did some nifty things that I'd like to share.</p>

<p>The PyBlosxom blog setup uses lots of XSLT to create the web pages, this works okay, but isn't ideal at all.  Also, it makes it really hard to get myself loose of the XSLT.  I was originally going to get rid of it all together, but then I realized that I liked being able to define a few of my own tags and having a translator convert them to HTML.  Within the new software, entries are written in as standard text, and then passed through a series of translators, which can be simple things like cleaning up the HTML with <a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>, running an XSLT processor, or syntax highlighting bits of source code in the document.  These are chained together to get some nice results, but when importing and exporting data, you're still working with the original.</p>

<p>The same technology applies to comments.  This way I can allow users to use HTML code in their comments, but use XSLT to filter out code that they shouldn't be using.  I can specify some pretty precise terms too, like not allow images bigger than 200 pixels or something silly like that.  Because I run the comments through BeautifulSoup beforehand, it usually  guarantees that we'll get a usable output from the comment. In the future, this will allow users to embed code in comments and have it highlighted in the same way as my code is.  The translation is only done at creation time, so it's minimal load to the system to have this feature.</p>

<p>Anyway, that's the neatest feature.  Once I get some better style sheets, I'll see about replacing the current PyBlosxom infrastructure with the new system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 24 Hour Blog Challenge]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2008/01/03/24hrblogchallenge/"/>
    <updated>2008-01-03T11:16:00-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2008/01/03/24hrblogchallenge</id>
    <content type="html"><![CDATA[<p>I've had a weblog of some sort since my early 1998 -- back before they were called weblogs.  Originally it was a set of PHP 3 scripts that talked to a MySQL database, pretty high-tech stuff for the era.  In 2001 I moved over to Movable Type because it was the blogging hotness at the time.  In 2003 after moving out of Chicago and seeing SixApart squander their opportunity due to asinine licensing terms (and the fact that Movable Type is written in Perl), I started using <a href="http://pyblosxom.sf.net/">PyBlosxom</a>, a dead simple system that relies on a set of files in the directory tree for posts.</p>

<p>Of course, I had to go an hack up PyBlosxom, giving it the ability to push XSLT transformations to the client, or doing them server side for readers with older browsers.  I also removed some of the silly stuff, like the ability to have it redo the content in 99 billion different formats.  The system has worked really well for me, creating a new post is as simple as opening up vi or Emacs and writing a text file.</p>

<p>But, this has it's drawbacks.  First, a complete directory crawl is required on every hit to the page.  With only a handful of posts, this isn't a big deal.  But I've got a couple of hundred posts and they're stored in subversion, so the crawl takes a while.  The posts then need to be sorted, and categorized.  Yeah, it's slow.  Second, It's all very hackey right now.  The fact that the XSLT transformations even remotely work is interesting, but I hate writing something and then seeing the <a href="http://en.wikipedia.org/wiki/Yellow_Screen_of_Death">Yellow Screen of Death</a> in Firefox because I forgot to close a tag.</p>

<p>Thirdly, the comment system works, but it quite sub-par right now. Everything is stored in flat files, which makes comment management difficult.  Finally, I don't have the ability to save drafts, manage tags, or easily tweak a lot of things I'd love to do.  It's become painful.  PyBlosxom, it's not you, it's me.  I don't have time to do this stuff anymore.</p>

<p>What I do have time for is a 24 Hour Blog Challenge.  The goal of this will be to write a complete new piece of Weblog software in 24 hours -- and I'll do it while not neglecting any other responsibilities.  I should stress right now, I have no code written for this software, and will not until I return from the airport tomorrow and start writing.</p>

<p>Architecture wise, I have already decided that it will be a Python CGI system using an SQLite backend.  I'm not going to worry about WSGI or anything like that right now.  The system must be meet the following requirements at the end of 24 hours for it to be a success:</p>

<ul>
<li>Import all previous stories -- It's no good if I lose all of my flat text files that I have laying around.  One of the first tasks will be to create an importer.</li>
<li>Non-Breakage of previous URLs -- I like the current URL scheme I have my for weblog and I would hate to have to create hundreds of <a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">mod_rewrite</a> redirects to keep everything working.</li>
<li>Command line import/export for stories -- I like being able to edit stories from the command line.  This new setup will just mean that I have to dump the story in and out with a script, nothing big and highly related to the first requirement.</li>
<li>Hierarchical classification of stories -- basically, continue to implement categories with improved category browsing.</li>
<li>Non-Hierarchical classification of stores -- make the tags on each story do something other than link to Technorati.</li>
<li>RSS Feeds -- if people can't read the weblog through a news reader, it's a web page, not a weblog.</li>
<li>User comments -- Likewise, all weblogs should have some way to easily interact with the author.  Comments must be enabled.</li>
</ul>


<p>In addition to those features, here are requirements that should be completed, but the task won't be a failure if they're not.</p>

<ul>
<li>User accounts -- not required for all comments, but could be used by users to customize the appearance of their comments, etc. Also makes management a bit easier.</li>
<li>Web based editing -- sometimes SSH just isn't an option and a web based system would be better.</li>
<li>Publish/Draft distinction -- Under PyBlosxom, stories are either published and public, or not.  There isn't a way to mark something as a draft, see how it will look, and then edit it some more.</li>
<li>OpenID support -- this is a long-shot, but OpenID seems nifty, I'd like to support it and set up some OpenID services for Wagstrom.net.</li>
<li>Integration with <a href="http://pennave.sf.net/">PennAve</a> -- there's no reason why it shouldn't be easy for me to use photos in my collection in weblog posts.</li>
<li>WSGI support -- I hear that WSGI is the new hotness for hosting Python applications.  Supporting it should allow faster responses and all that.  This is a bigger thing that will most likely see me move <a href="http://pennave.sf.net/">PennAve</a> to
a WSGI interface too.</li>
</ul>


<p>I should stress that the purpose of this challenge is NOT to write the next Wordpress, MovableType, or whatever else the kids are using today.  The purpose is to see if I can create the system and to replace an aging and creaky system currently installed.  Anyway, wish me luck, I'll try to post as I go along tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grandr Public Git Repository now Open]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2007/09/27/grandr-public-git-repo/"/>
    <updated>2007-09-27T17:20:00-04:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2007/09/27/grandr-public-git-repo</id>
    <content type="html"><![CDATA[<p>Yesterday in my post about <a href="/weblog/linux/what-you-should-love-about-gutsy.xml">things to love in Ubunty Gutsy</a>, I talked a little bit about how great it was to have Xrandr 1.2 finally available on my Laptop.  There's a little graphical utility to setup the screens under Xrandr 1.2 called <a href="http://gitweb.freedesktop.org/?p=xorg/app/grandr.git">grandr</a>.  However, it had some critical flaws, mainly it crashed on my machine and didn't remember the layout of the screens at all.  This made it less than ideal.</p>

<p>Luckily, after a little bit of hacking, I've managed to improve the program to the point where it's usable and even has a bit of remembering where the displays are currently located.  It's not perfect by any means, but it works well enough for me.  If you're interested in pulling down my latest changes you can do that using:</p>

<pre><code>git clone http://patrick.wagstrom.net/git/grandr.git
</code></pre>

<p>I'm still pretty new to this whole <a href="http://git.or.cz">git</a> thing, so I may have mucked something up, but I'm pretty sure that will get you my master trunk.  If you have questions, feel free to email me.</p>
]]></content>
  </entry>
  
</feed>
