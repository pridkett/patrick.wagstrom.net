<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | My Delusional Dream]]></title>
  <link href="http://patrick.wagstrom.net/weblog/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://patrick.wagstrom.net/weblog/"/>
  <updated>2012-05-12T20:51:14-04:00</updated>
  <id>http://patrick.wagstrom.net/weblog/</id>
  <author>
    <name><![CDATA[Patrick Wagstrom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wouldn't it be great if there was a StackOverflow for that?]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2009/12/13/wouldnt-it-be-great-if-there-was-a-stackoverflow-for-that/"/>
    <updated>2009-12-13T13:51:58-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2009/12/13/wouldnt-it-be-great-if-there-was-a-stackoverflow-for-that</id>
    <content type="html"><![CDATA[<p>Since I started on my "seekrit project" I've asked a few questions on programming related topics at <a href="http://www.stackoverflow.com/">StackOverflow</a>.  Thus far I've found the answers to be really helpful.  While most people know about StackOverflow, lots of folks don't realize that there three other sites in StackOverflow empire: <a href="http://serverfault.com/">ServerFault</a> - for system administration issues, <a href="http://superuser.com/">SuperUser</a> - for end user software issues, and <a href="http://meta.stackoverflow.com/">Meta.StackOverflow</a> - for site related questions about StackOverflow.</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/stackoverflow-minifigs.jpg">
		<figcaption>The Four Horsemen of the StackOverflow Empire </figcaption>
	</figure></notextile></div></p>

<p>Today during <a href="http://bit.ly/84eF7i">my run in Central Park</a>, I was thinking about the community that StackOverflow has.  It's really a remarkable thing, there are thousands of users and most posts in even the most obscure topics get lots of views quickly.  If you're lucky, you'll even get a good answer or two -- or, more likely, you'll have someone who is smart tell you that you're not asking the right question, and help you down the right path to rethink your problem in the correct way.  This sort of input can be really helpful in many other domains, parenting, cooking, travel, etc.</p>

<p>It's actually possible to run your own StackOverflow site.  The software, <a href="http://stackexchange.com/">StackExchange</a> is available from <a href="http://fogcreek.com/">FogCreek software</a> who offer different hosted plans.  At $129/mo for the most basic plan it's not cheap at all, but when you consider that includes everything, it's not a horrible idea either.  It's been a pretty decent hit so far too, the <a href="http://meta.stackexchange.com/questions/4/list-of-stackexchange-sites">StackExchange</a> website lists numerous sites around specific topics.</p>

<p>So here's the sites that I'd really like to see:</p>

<ul>
<li>NYCLikeALocal.com: Questions and answers about the self-proclaimed greatest city in the world.  With a focus for people actually living in the city who may not be overly familiar with the city.  In other words, folks like me who live in NYC, but aren't native.</li>
<li>RunThroughTheWall.com: Questions and answers about training for marathons and other long distance endurance sports, like IronMen triathlons.</li>
<li>SnackExchange.com: Ideas for cooking, specifically desserts.  Everyone loves deserts.</li>
</ul>


<p>After browsing through the sites, I found out that in each of the cases someone had already beat me to it.  For NYC local information there is <a href="http://pojocity.com/">PojoCity.com</a>.  For running someone created <a href="http://fit.stackexchange.com/">FitBulb</a> which covers all sports.  Unfortunately, they weren't on the ball and let a squatter get FibBulb.com.  For cooking there is <a href="http://cooking.stackexchange.com/">cooking.stackexchange.com</a>, which probably the least branded StackExchange site in existence.</p>

<p>While I've contributed to FitBulb, most of the sites are rather sparse.  This could be for a variety of reasons, it's likely that they haven't advertised themselves enough.  StackOverflow launched and was hugely successful because Jeff Atwood and Joel Spolsky both had legions of followers on their weblogs.  When the site was launched there was already a huge pool of users.  By mentioning them here I'm hoping that other people will use these three StackExchange sites and help build mass.</p>

<p>The second reason why the sites may have difficulty in excelling is because they're not generally perceived as a need.  For programming there was a definite need for a site where people could ask questions and get reasonable answers.  StackOverflow was aimed dead center at destroying ExpertsExchange, both by providing better answers, more information about people who provide answers, and not seeming all scammy. From the looks of it, they're succeeding.</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/google-stackoverflow-vs-experts-exchange.png">
		<figcaption>Stackoverflow will soon kill Experts-Exchange.  And the world will be a better place. </figcaption>
	</figure></notextile></div></p>

<p>However, most of these other domains don't have any large community at all, so it's up to the site developers and maintainers to build one.  This is no easy task. I'd like to think that I'm pretty savvy, but I haven't seen much about communities for any of these topics.</p>

<p>Finally, there's a small problem with the architecture of StackExchange.  I would like to vote up some posts and answers on FitBulb, but I can't do that until I get 15 karma.  Unfortunately, when no one has any karma on the site, it's difficult to build enough karma.  So, if the site admins hear me, vote me up some so I can support other people on your fledgling site.</p>

<p>In any case, it's exciting to see that there are StackExchange sites for the three sites that I really hoped would exist.  I've already posted a bit to FitBulb and have found some useful stuff on Pojocity, but remember, community sites are only as good as the people who use them.  So visit the sites and give them some love today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Administration, New Website, and Lost Content]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2009/01/20/new-administration-new-website-and-lost-content/"/>
    <updated>2009-01-20T20:35:57-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2009/01/20/new-administration-new-website-and-lost-content</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/01/400px-barack_obama_after_inaugural_address_1-20-09.jpg">
		<figcaption>I have just wiped away eight years of internets content! </figcaption>
	</figure></notextile></div></p>

<p>One of the more interesting aspects of the inauguration today was how the website at <a href="http://www.whitehouse.gov/">whitehouse.gov</a> switched over from the Bush administration to the Obama site right around noon.  Shortly thereafter folks noticed <a href="http://www.kottke.org/09/01/the-countrys-new-robotstxt-file">the drastic contrast in robots.txt files</a> between the two administrations.  Some folks are saying this represents a difference in attitudes between the administrations, which may be true, but it's much more likely a result of a differences in information architecture and the smaller amount of content on Obama's whitehouse.gov.</p>

<p>However, this highlights something a bit more interesting, when the website was switched over massive amounts of content were immediately rendered obsolete and for most purposes lost.  I'd imagine that National Archives has a copy of them, just like they archive email from the executive branch, but that doesn't make it that easy to get access too.  While much of the information on the whitehouse.gov site is partisan banter, there are some elements that are lost -- like the <a href="http://web.archive.org/web/20080307031231/http://www.whitehouse.gov/kids">Whitehouse Kids page</a> (archive.org link), and Hurricane Katrina pages (not archived).</p>

<p>Given the increased importance of information placed on the web and the importance of a smooth transition of power, shouldn't some work be done to archive this information?  I realize that it may not be possible to continue to provide interactive elements as the system administrators have left, but a static archive would be helpful and also serve as a valuable resource for folks looking back at previous presidencies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Too Smart To Do It Yourself]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2008/12/10/youre-too-smart-to-do-it-yourself/"/>
    <updated>2008-12-10T23:43:37-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2008/12/10/youre-too-smart-to-do-it-yourself</id>
    <content type="html"><![CDATA[<p>The Internet is a great place of open standards and open implementations that allows just about anyone to put together their own services.  The plethora of programming languages that advertise themselves as being well suited for web development gives a developer a number of different swiss army knives to use in creating their new service.  Even after we've picked a language, or just settled for the language that we're most familiar with, there are more frameworks than you can shake a stick at.  Of course, you're not an expert in all of those frameworks, and they probably don't work exactly as you want to, so what are you supposed to do?  Build your own of course!</p>

<p>If we take Python as an example, it should be obvious to everyone that with systems like <a href="http://www.djangoproject.com/">Django</a>, <a href="http://www.cherrypy.org/">CherryPy</a>, <a href="http://www.pylonshq.com/">Pylons</a>, and <a href="http://pyjs.org/">Pyjamas</a>, we're clearly in need of a few more web frameworks.  Any one of these would work well for your new weblog software that you want to launch.  This new weblog software, will, of course, be different enough from any of the <a href="http://wiki.python.org/moin/PythonBlogSoftware">dozens of other freely available Python based weblog tools</a> to justify your time in writing it.  So what's the next step?</p>

<p><strong>STOP.  STOP NOW.</strong></p>

<p>You're clearly a smart person if you're thinking about writing your own web framework.  You've been able to look over the other tools and decided that the features that you want aren't provided in any given one of those frameworks.  You've worked out a plan and already sketched your ideas on the back of the napkin.  Heck, maybe you've even gone so far as to start a <a href="http://git.or.cz/">git</a> repository so other people can access your data.  You're going to make it open source and it's going to rock and your new weblog software is going to be great too!</p>

<p>But why should anyone care?</p>

<p>Well, they probably won't.  Unless you're unemployed and looking to create a cool project that you can build a consultancy on at some point the real world is going to intrude and you're going to have something better to do.  Usually this happens within a couple of days.  Now you've already gone and migrated your weblog over to whatever your new software to show how cool it is -- except that suddenly it's unmaintained, because the maintainer, in this case you, has gotten bored of working on the project now that it's past the "sexy" phase.</p>

<p>In addition to having any little bugs that may arise with your nice new weblog software, you're also stuck unable to utilize lots of the cool new technologies that are out there.  If you want <a href="http://openid.net/">OpenID</a> or <a href="http://recaptcha.net/">reCaptcha</a>, you've got to write the code yourself.  This is a great way to learn about those technologies, but is it really what you're an expert at?  Wouldn't it be easier if someone else wrote a really good implementation for you?</p>

<p><strong>OH WAIT...THEY DID.  YOU ALREADY DISCOUNTED IT.</strong></p>

<p>Remember that weblog software you said sucked way too much back when you started down your path?  Well, that software has a community around.  They've already built a lot of the tools that you're wasting your time building.  And they've built them much better than you would have.  It's more stable, better supported, and is easier to use.  Of course, when you were looking at the software the first time, these things never came up.  If only you had thought ahead.</p>

<p>This happens to lots of folks.  I'm writing this largely out of my own experience.  In January of 2008, I embarked on what I called <a href="/weblog/tags/24hrblogchallenge/">The 24 Hour Blog Challenge</a>, an effort to replace my even older and crappier blog system in 24 hours or less.  While I created a decent enough system, there were enough feature's that weren't implemented or had small quirks that it was hindering my reason for having a weblog -- writing.  I'm not saying that it was a failure to write PostStreet, just that I didn't have enough time or desire to finish it, and you probably won't either.</p>

<p>So what's the solution?  Be smart.  Take advantage of what other folks have done.  In my case, I moved over to <a href="http://www.wordpress.org/">WordPress</a> (although with frustration as I installed it last night and promptly had to upgrade ti this evening).  Now I've got lots of the cool features I had wanted, such as reCaptcha and OpenID, and none of the hassle of a creaky system.  This should allow me to focus on what I've got expertise in, which is not writing weblog software, but understanding Open Source software and communities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Street View Stops for a Bite]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2008/01/30/google-street-view-stops-for-a-bite/"/>
    <updated>2008-01-30T11:48:00-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2008/01/30/google-street-view-stops-for-a-bite</id>
    <content type="html"><![CDATA[<p>I was looking for a store in the South Hills of Pittsburgh a few weeks ago and wanted to make sure that I found the store okay, enter Google Street View.  I popped up the location into Google Maps and started looking around.  Yech, it was pretty far off.  However, I did discover that even the googlers need to eat.  Apparently they favor <a href="http://www.wendys.com/">Wendy's</a>.</p>

<div style="text-align: center"><iframe width="425" height="350" frameborder="0" scrolling="no"
marginheight="0" marginwidth="0"
src="http://maps.google.com/?ie=UTF8&amp;om=0&amp;source=embed&amp;ll=40.392819,-80.061896&amp;spn=84.313262,161.015625&amp;t=w&amp;z=3&amp;layer=c&amp;panoid=CzIb-R2h3Ftieoe0dKSDMA&amp;cbll=40.392819,-80.061896&amp;cbp=13,-90.27826468625807,,0,7.181511402920179&amp;output=svembed"></iframe><br
/><small><a
href="http://maps.google.com/?ie=UTF8&amp;om=0&amp;source=embed&amp;ll=40.392819,-80.061896&amp;spn=84.313262,161.015625&amp;t=w&amp;z=3&amp;layer=c&amp;panoid=CzIb-R2h3Ftieoe0dKSDMA&amp;cbll=40.392819,-80.061896&amp;cbp=13,-90.27826468625807,,0,7.181511402920179"
style="color:#0000FF;text-align:left">View Larger Map</a></small></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracks Behind Apache With Non-Proxied Static Content]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2006/07/30/tracks-behind-apache-static/"/>
    <updated>2006-07-30T14:30:00-04:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2006/07/30/tracks-behind-apache-static</id>
    <content type="html"><![CDATA[<p>In my <a href="/weblog/web/tracks-behind-apache.xml">previous post on setting up Tracks and Ruby on Rails to run behind an Apache proxy</a>, there was a bit of symlink hokerey  hat one had to do to make it serve the static content properly.  What if we didn't have to do that?  What if we could get by with only adding the line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ActionController::AbstractRequest.relative_url_root = &quot;/</span><span class="n">tracks</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To your ~/tracks/config/environment.rb file?  Wouldn't that just be grand?  What if we could go beyond that and make Apache serve up all the static content?  It's one less component to break while proxying requests back and forth.  Well, we can.</p>

<p>In additon to the ability of ProxyPass statements to direct requests to a remote proxy, they can also be used to deny certain URLs from a proxy.  That's the technique that we'll be using here.  Previously, the configuration section of interest
looked like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="nb">RewriteEngine</span> <span class="k">on</span>
</span><span class='line'><span class="nb">RewriteRule</span> ^/tracks$ https://secure.wagstrom.net/tracks/ [R,L]
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/</span> http://127.0.0.1:3000/tracks/
</span><span class='line'><span class="nb">ProxyPassReverse</span> <span class="sx">/tracks/</span> http://127.0.0.1:3000/tracks/
</span><span class='line'><span class="nb">ProxyPreserveHost</span> <span class="k">on</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, we just add in some lines to Apache to let it know what URLs not to proxy and how to handle those urls.  Just change the section so it now appears as follows:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="nb">RewriteEngine</span> <span class="k">on</span>
</span><span class='line'><span class="nb">RewriteRule</span> ^/tracks$ https://secure.wagstrom.net/tracks/ [R,L]
</span><span class='line'>
</span><span class='line'><span class="nb">RequestHeader</span> set X_FORWARDED_PROTO &#39;https&#39;
</span><span class='line'>
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/images</span> !
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/stylesheets</span> !
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/javascripts</span> !
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/favicon.ico</span> !
</span><span class='line'><span class="nb">Alias</span> <span class="sx">/tracks</span> <span class="s2">&quot;/home/patrick/tracks/public/&quot;</span>
</span><span class='line'><span class="err">&amp;lt;</span><span class="nb">Directory</span> <span class="sx">/home/patrick/tracks/public/</span>&amp;gt;
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'><span class="err">&amp;lt;/Directory&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">ProxyPass</span> <span class="sx">/tracks/</span> http://127.0.0.1:3000/tracks/
</span><span class='line'><span class="nb">ProxyPassReverse</span> <span class="sx">/tracks/</span> http://127.0.0.1:3000/tracks/
</span><span class='line'><span class="nb">ProxyPreserveHost</span> <span class="k">on</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first four ProxyPass statements tell Apache not to proxy requests to /tracks/images, /tracks/stylesheets, /tracks/javascripts, and /tracks/favicon.ico.  The next six lines make it so Apache actually knows how to serve the static content.  You'll obviously want to replace /home/patrick/tracks/public with wherever your location of the Tracks public data is.  Now, restart Apache and you should have Apache serving the static content and Rails serving the dynamic content.  Awesome.</p>
]]></content>
  </entry>
  
</feed>
