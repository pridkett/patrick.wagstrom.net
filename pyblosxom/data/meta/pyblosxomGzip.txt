Weblog is now Gzip Encoded

<!-- Date: 2004-10-26 09:57 -->
<p>
After my <a href="http://patrick.wagstrom.net/weblog/code/python/feedParsing.xml">rant about bandwidth saving</a>
from last night, I decided to do what I could with my install of PyBlosxom.  Unfortunately, it's going to be
difficult to implement the <my:verbatim>if-modified-since</my:verbatim> directive with how PyBloxsom is built,
however, I knew it couldn't be that hard to work around the Gzip stuff.  Basically, all the encodings a client
can accept are stored in an environment variable <my:verbatim>HTTP_ACCEPT_ENCODING</my:verbatim>.  This will
contain a string something like <my:verbatim>gzip,deflate</my:verbatim>.  What I do is break apart the string,
and if gzip is found in the string, I encode the data.
</p>
<p>
Of course, it wasn't quite that straight forward.  Luckily, I already was using a
<a href="/weblog/meta/xsltRendererWithLibXSLT.xml">customized PyBlosxom renderer</a>, which made this a little
easier.  This renderer now handles all the gzip stuff.  If a client support gzip, then the output stream is
automatically changed to <my:verbatim>sys.stdout</my:verbatim> and the data is sent out that way to avoid
nasty encoding problems.  Also, I needed to add a <my:verbatim>content-length</my:verbatim> to the output
so everything would come across nice and neat for the clients unpacking the data.  The result is pretty nice.
</p>
<p>
Incidentally, this is needed because by I couldn't figure out how to get Apache's <a href="http://www.sourceforge.net/projects/mod-gzip">mod-gzip</a> to compress output of CGI scripts.  Once again, whenver I get around to completing
all the work on <a href="/weblog/code/priblog">PriBlog</a>, I don't think this will be much of a problem because most
of the content will be statically generated.
</p>
