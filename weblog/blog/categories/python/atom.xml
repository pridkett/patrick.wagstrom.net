<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | My Delusional Dream]]></title>
  <link href="http://patrick.wagstrom.net/weblog/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://patrick.wagstrom.net/weblog/"/>
  <updated>2012-05-12T20:51:14-04:00</updated>
  <id>http://patrick.wagstrom.net/weblog/</id>
  <author>
    <name><![CDATA[Patrick Wagstrom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Command Line Updating Pages on Google Sites]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2010/02/04/command-line-updating-pages-on-google-sites/"/>
    <updated>2010-02-04T21:38:28-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2010/02/04/command-line-updating-pages-on-google-sites</id>
    <content type="html"><![CDATA[<p>About eighteen months ago I migrated <a href="http://academic.patrick.wagstrom.net/">my academic web pages</a> away from a self hosted solution on a Linux box in my living room to <a href="http://sites.google.com/">Google Sites</a>.  Mainly this was done because I was applying for jobs and wanted to make sure that the site would be reliable.  But although I came for the reliability, I stayed for the features.</p>

<p>It's true that Google Sites is somewhat limiting in what you can do.  You can't do fun stuff with <a href="http://jquery.com/">jQuery</a> and highly customized CSS is verboten.  It's not going to work for someone who needs to share a design portfolio.  However, for an academic it works really well.  Basically, I need a set of pages about <a href="http://academic.patrick.wagstrom.net/">my research</a>, <a href="http://academic.patrick.wagstrom.net/publications">copies of my papers</a> and <a href="http://academic.patrick.wagstrom.net/presentations">presentations</a>, and various forms of <a href="http://academic.patrick.wagstrom.net/resume">my résumé</a> and <a href="http://academic.patrick.wagstrom.net/cv">cv</a>.  These are all typically boring pages that can be created with some simple HTML.  Google Sites manages that and even helps them look good too.</p>

<p>At that time I also realized that I needed to be a bit more flexible in how I handled my resume and CV.  Up until this point I had a highly customized LaTeX file that generated a very pretty PDF.  The beauty was only skin deep, underneath the PDF it was ugly, difficult to maintain, and if I wanted to paste portions of the document in to an email or someone requested a word document version, I was out of luck.</p>

<p>At the time I still hadn't gotten <a href="http://patrick.wagstrom.net/weblog/2009/11/25/shutting-down-pennave/">my head on straight regarding how XML should never be used by humans</a>, so I chose the <a href="http://xmlresume.sourceforge.net/">XML Résumé Library</a>, an Open Source package that hasn't been updated in a couple of years.  The library consists of an XML DTD that defines elements of a resume and a set of XSLT files that translate your resume into various formats, including text, html, and FO.  I can then use the FO files to generate PDF, DOCX, and ODT files.  Simple enough. Now I have a single source document with a Makefile that compiles the file into both my résumé and cv.</p>

<p>The problem is that I provide each document in five different formats, which means that I needed to upload 10 documents every time that I changed something.  This was not ideal at all.</p>

<p>Luckily, Google is in the process of making open APIs for all of their tools and last September they finally released the <a href="http://code.google.com/apis/sites/">Google Sites API</a>.  It still isn't 100% complete, but with the <a href="http://code.google.com/p/gdata-python-client/">2.0.7 release of the python libraries</a> it is finally to the point where the python library is suitable for updating documents.</p>

<p>I whipped up a simple little python script that uploads files from the command line to Google Sites.  It only works with documents that have previously been uploaded by hand, so in that sense, it only updates documents.  You can find <a href="http://gist.github.com/295408">site_uploader.py as a github gist</a> or it should be embedded below.</p>

<p>The script itself has only been tested on apps for domains and has a couple of mandatory options:</p>

<ul>
<li><strong>-s/--site</strong>: The name of the site to update.  This isn't the URL, but the name in your admin panel for the site.</li>
<li><strong>-d/--domain</strong>: The domain name of your apps for domain setup.  I'm not certain what happens if you don't include this because all of my sites are hosted through Apps for Domains.</li>
<li><strong>-u/--user</strong>: The username to use for accessing the Google Sites API.</li>
<li><strong>-p/--pass</strong>: The password for the user account. The sites API provides multiple different authentication methods.  For my own convenience I have my Makefile prompt me for a password with Zenity then invoke the script.  I'm on a laptop which means the chance of someone else seeing my password in the process list is pretty slim.</li>
<li><strong>ENTRY_ID</strong>: each document on your site has an entry_id that doesn't change with updates.  Think of it like a UUID.</li>
<li><strong>NEW_DOCUMENT</strong>: the filename of the new document to store on Google sites.</li>
</ul>


<p>When you're first getting started with sites_uploader you can also use the <strong>--list</strong> option to get a list of all the documents on the site and their entry_id values.  Here's what a simple session might look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>patrick@wallaby$ python sites_uploader.py -s "dummy" -d "wagstrom.net" -u "patrick@wagstrom.net" -p "PASSWORD" --ssl --list
</span><span class='line'>["attachment.png", "attachment", "https://sites.google.com/feeds/content/wagstrom.net/dummy/9999384153430219999"]
</span><span class='line'>["Home", "webpage", "https://sites.google.com/feeds/content/wagstrom.net/dummy/9999953700077559999"]
</span><span class='line'>["files", "filecabinet", "https://sites.google.com/feeds/content/wagstrom.net/test/9999182398032899999"]
</span><span class='line'>patrick@wallaby$ python sites_uploader.py -s "dummy" -d "wagstrom.net" -u "patrick@wagstrom.net" -p "PASSWORD" --ssl https://sites.google.com/feeds/content/wagstrom.net/dummy/9999953700077559999 home.html
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This examines the site "dummy" under "wagstrom.net" by first listing all the documents, of which there are three: a png file called "attachment.png", a webpage called "home", and a filecabinet called "files".  We note the id of the webpage called "home" and wish to replace its content with that of home.html.  When an operation is successful it prints out nothing.</p>

<p>The beauty of using id's is that they don't change, so once you look them up and put them into your Makefile, you'll never need to change them again.  The other nice thing about Google Sites is that it sanitizes your HTML, so you can feed it a complete HTML file and it is smart enough to just take the part that belongs in the body of the document.  Pretty neat stuff indeed.</p>

<p>The code for the tool should be pretty straight forward, but folks have questions feel free to email me and I'll attempt to answer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textile Markup in Trac]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2009/12/06/textile-markup-in-trac/"/>
    <updated>2009-12-06T19:46:57-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2009/12/06/textile-markup-in-trac</id>
    <content type="html"><![CDATA[<p>For a new secret project I’ve been putting together an installation of Trac to provide a web interface for task management. I found myself wanting to create a nice looking table within a Trac wiki page to document different dependencies needed by the software. In a normal installation there are three different ways to do this:</p>

<h2>Trac’s Wiki Formatting</h2>

<p>This is probably the simplest option, however it’s also the most limiting, there is no way to provide additional styling to elements and you can’t create columns that span multiple rows or columns.  The lack of additional styling is particularly difficult because you can’t correct it easily with CSS without modifying all of the tables.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='moin'><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Client Side Packages<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Package<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>License<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Purpose<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://jquery.com/</span><span class="s"> jQuery</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://docs.jquery.com/Licensing</span><span class="s"> MIT or GPL</span><span class="k">]</span> (choice) <span class="c">||</span> General Purpose javascript <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://raphaeljs.com/</span><span class="s"> Raphaël</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://raphaeljs.com</span><span class="s"> MIT</span><span class="k">]</span> (see sidebar) <span class="c">||</span> Vector graphics library <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="c">&#39;&#39;&#39;</span>Server Side Packages<span class="c">&#39;&#39;&#39;</span> <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://www.djangoproject.com/</span><span class="s"> Django</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://code.djangoproject.com/browser/django/trunk/LICENSE</span><span class="s"> BSD</span><span class="k">]</span> <span class="c">||</span> Server framework <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://pinaxproject.com/</span><span class="s"> Pinax</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://github.com/pinax/pinax/blob/master/LICENSE</span><span class="s"> MIT</span><span class="k">]</span> <span class="c">||</span> Server social components <span class="c">||</span>
</span><span class='line'><span class="c">||</span> <span class="k">[http://www.sqlite.org/</span><span class="s"> SQLite</span><span class="k">]</span> <span class="c">||</span> <span class="k">[http://www.sqlite.org/copyright.html</span><span class="s"> Public Domain</span><span class="k">]</span> <span class="c">||</span> Server database <span class="c">||</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/trac-table.png">
		<figcaption>Table output using Trac Wiki Processing </figcaption>
	</figure></notextile></div></p>

<h2>HTML</h2>

<p>HTML is of course, the go to for all of this.  However, the whole reason I started looking at this is that I didn’t want to embed a huge chunk of HTML into my wiki page.  I know I can do all the formatting I want, but this really isn’t an option.</p>

<h2>ReStructured Text</h2>

<p>ReStructured Text is the preferred markup language of Python documentation.  It’s more robust than Trac Wiki formatting, especially for tables.  The processor for ReStructured Text in Trac is smart enough to tag tables with the class ‘docutils’ which helps out immensely when trying to style the documents.  This allows for the creation of some prettier tables.  It also allows the creation of header columns and multi-column/row cells.  However, it’s not great for this sort of general purpose document, for two reasons.  First,  it doesn’t allow for a header row to appear in the middle of the table.  I’d really like these to be part of the same table.  Secondly, you can’t have multiple short links with the same name.  So, I can have the name ‘MIT’ link to two different pages without doing implicit links.  However, this introduces a new third problem, which is that table cells are proportional in width to the RST equivalent.  Here’s the sample table structured in RST:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rest'><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Client Side Packages                                                                                             |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Package      | License                                                              | Purpose                    |
</span><span class='line'>+==============+======================================================================+============================+
</span><span class='line'><span class="o">|</span> jQuery&lt;em&gt;      | &lt;code&gt;MIT or GPL &amp;lt;http://docs.jquery.com/Licensing&amp;gt;&lt;/code&gt;__ (choice)           | General JavaScript library |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+
</span><span class='line'><span class="o">|</span> Raphaël&lt;/em&gt;     | &lt;code&gt;MIT &amp;lt;http://raphaeljs.com/&amp;gt;&lt;/code&gt;__ (see sidebar)                        | SVG/VML Library            |
</span><span class='line'>+--------------+----------------------------------------------------------------------+----------------------------+&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Server Side Packages                                                                                            |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Package      | License                                                              | Purpose                   |
</span><span class='line'>+==============+======================================================================+===========================+
</span><span class='line'><span class="o">|</span> Django&lt;em&gt;      | &lt;code&gt;BSD &amp;lt;http://code.djangoproject.com/browser/django/trunk/LICENSE&amp;gt;&lt;/code&gt;__ | Server framework          |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> Pinax&lt;/em&gt;       | &lt;code&gt;MIT &amp;lt;http://github.com/pinax/pinax/blob/master/LICENSE&amp;gt;&lt;/code&gt;&lt;strong&gt;          | Server social components  |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+
</span><span class='line'><span class="o">|</span> SQLite_      | &lt;code&gt;Public Domain &amp;lt;http://www.sqlite.org/copyright.html&amp;gt;&lt;/code&gt;&lt;/strong&gt;             | Server database           |
</span><span class='line'>+--------------+----------------------------------------------------------------------+---------------------------+&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>.. &lt;em&gt;jQuery: http://jquery.com/
</span><span class='line'><span class="cp">.. &lt;/em&gt;Raphaël: http://raphaeljs.com/</span>
</span><span class='line'><span class="cp">.. &lt;em&gt;Django: http://www.djangoproject.com/</span>
</span><span class='line'><span class="cp">.. &lt;/em&gt;Pinax: http://pinaxproject.com/</span>
</span><span class='line'><span class="p">..</span> <span class="nt">_SQLite:</span> http://www.sqlite.org/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, this results in tables that are unnaturally wide and must be split into two different tables.  While the result is passable, especially after throwing down some CSS to help out and collapse those ugly borders, the width of the tables makes them look highly awkward, and therefor unacceptable.</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/rst-table.png">
		<figcaption>Output using ReStructured Text </figcaption>
	</figure></notextile></div></p>

<h2>Markdown</h2>

<p>Markdown is the hotness markup language that all of the web 3.0 kiddies like to use. And why not?  It’s from John Gruber, macboy extraordinairre!  Markdown is designed to be wholly readable without people needing to know how to speak HTML.  It’s quick and easy to use.  There’s a pretty good markdown processor available for Trac.  However, there are a few shortcomings.  First, by default Markdown has no support for tables, so you’ll need to drop back to HTML for the formatting.  This is less than ideal as it’s messy again.  Furthermore you cannot use Markdown inside of an HTML table.</p>

<p>Fortunately, there are some extensions to Markdown that provide support for tables.  As is normal for this sort of community, it’s been further extended to allow for all sorts of crazy formatting and alignment issues.  However, as near as I can tell it still does not allow cells to span multiple columns/rows.  Or, if it does, the Markdown plugin for Trac doesn’t support it.  I didn’t really get far enough to generate anything really interesting with Markdown.</p>

<h2>Textile</h2>

<p>In the world of Web 2.0 fanboys, the other competing markup, favored by the Ruby guys and folks at GitHub, is Textile.  It’s slightly similar to Markdown, in that it aims to be fairly readable, but advanced features let you do neat stuff at the expense of some readability.  Fortunately, using Textile I was able to make the table look exactly like I wanted to.  Although Textile allows you to use multiple header rows, I did have to apply some simple CSS styling to the header columns and rows.  Here’s the Textile I used.</p>

<p>Liquid error: ClassNotFound: no lexer for alias 'textile' found</p>

<p>And here is the actual output from Trac after rendering the Textile (after a little bit of help from some CSS:</p>

<p><div class='bogus-wrapper'><notextile>	<figure class='center'>
		<img src="/media/2009/12/textile-table.png">
		<figcaption>Table output using Textile processor </figcaption>
	</figure></notextile></div></p>

<h2>Trac Textile Macro</h2>

<p>To get this far I needed to write a simple little Trac processing macro for Textile. Using information from the excellent Markdown Macro I was able to hack together a simple Textile Macro for Trac.  Before installing it you’ll need to install the Python Textile libraries.  Then, you can clone the git repository from git://github.com/pridkett/tractextilemacro.git.  From here you can install it like a normal Trac component.  Enable it in your trac.ini using these lines:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[components]
</span><span class='line'>Textile.* = enabled</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, just embed your Textile code in a block like this and you’ll be
on your way. Remove the double backslashes at the top of the block,
they're only there because otherwise Octopress chokes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\{\{\{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!Textile&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>Hello from the &lt;strong>magical&lt;/strong> land of "Textile":http://textile.thresholdstate.com/!
</span><span class='line'>}}}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing Names For Christmas with Python]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2007/11/28/christmas-name-drawing/"/>
    <updated>2007-11-28T14:32:00-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2007/11/28/christmas-name-drawing</id>
    <content type="html"><![CDATA[<p>This year my family finally decided to stop trying to shop for everyone and instead just draw names to see who is giving presents to whom.  In the past I've been at such name drawing events and they always seem to have issues, such as two person cycles or when someone is supposed to buy a gift for someone they don't really know that well.  It's also a little hard for us to draw names because we live so far from family.</p>

<p>Seeking to alleviate those problems, this year I wrote a little python script that takes care of all those problems for us.  The lines for names and invalidpairs are what you'll want to customize.  names is just a list of all the people that should be drawn.  invalidpairs a list for each individual of who they should not be able to draw.
Because we assume that spouses are already exchanging gifts, they're in the lists.  Also, my wife throught it strange that our parents wouldn't get presents from us, so I made it so spouses can't give to our parents, although they still can receive.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">sets</span> <span class="kn">import</span> <span class="n">Set</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;mom&#39;</span><span class="p">,</span><span class="s">&#39;dad&#39;</span><span class="p">,</span><span class="s">&#39;phil&#39;</span><span class="p">,</span><span class="s">&#39;petra&#39;</span><span class="p">,</span><span class="s">&#39;pete&#39;</span><span class="p">,</span><span class="s">&#39;patrick&#39;</span><span class="p">,</span><span class="s">&#39;kristina&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">invalidpairs</span><span class="o">=</span><span class="p">{</span> <span class="s">&#39;mom&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;dad&#39;</span><span class="p">]),</span>
</span><span class='line'>               <span class="s">&#39;dad&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;mom&#39;</span><span class="p">]),</span>
</span><span class='line'>               <span class="s">&#39;phil&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;petra&#39;</span><span class="p">]),</span>
</span><span class='line'>               <span class="s">&#39;petra&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;phil&#39;</span><span class="p">,</span><span class="s">&#39;mom&#39;</span><span class="p">,</span><span class="s">&#39;dad&#39;</span><span class="p">]),</span>
</span><span class='line'>               <span class="s">&#39;patrick&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;kristina&#39;</span><span class="p">]),</span>
</span><span class='line'>               <span class="s">&#39;kristina&#39;</span><span class="p">:</span> <span class="n">Set</span><span class="p">([</span><span class="s">&#39;patrick&#39;</span><span class="p">,</span><span class="s">&#39;mom&#39;</span><span class="p">,</span><span class="s">&#39;dad&#39;</span><span class="p">])}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ok</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="n">ok</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># shuffle the names a bit more</span>
</span><span class='line'>        <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pairings</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">availablenames</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
</span><span class='line'>        <span class="n">curinvalid</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="c"># cheat and make a copy of the names here</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span><span class='line'>            <span class="n">curinvalid</span><span class="p">[</span><span class="n">person</span><span class="p">]</span><span class="o">=</span><span class="n">Set</span><span class="p">(</span><span class="n">invalidpairs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">person</span><span class="p">,</span><span class="n">Set</span><span class="p">()))</span>
</span><span class='line'>            <span class="n">curinvalid</span><span class="p">[</span><span class="n">person</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># draw the names</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">person</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pairings</span><span class="p">[</span><span class="n">person</span><span class="p">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">Set</span><span class="p">(</span><span class="n">availablenames</span><span class="p">)</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">curinvalid</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">person</span><span class="p">,</span><span class="n">Set</span><span class="p">()))))</span>
</span><span class='line'>            <span class="n">availablenames</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">pairings</span><span class="p">[</span><span class="n">person</span><span class="p">])</span>
</span><span class='line'>            <span class="n">curinvalid</span><span class="p">[</span><span class="n">pairings</span><span class="p">[</span><span class="n">person</span><span class="p">]]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">person</span><span class="p">)</span> <span class="c"># eliminate A=&amp;gt;B, B=&amp;gt;A possibilites</span>
</span><span class='line'>        <span class="n">ok</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">val</span> <span class="ow">in</span> <span class="n">pairings</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s">=&amp;gt;</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The program itself is pretty straight forward.  Basically, keep on iterating until it finds a combination of people that works, starting with a new random individual each time.  Once person A draws     person B, make it so person B cannot draw person A.  The program doesn't do anything to ensure that you've given it a combination
of restrictions that works, however.  So it can run forever.</p>

<p>Anyway, it seems to have worked okay for our family, maybe it will work for your family too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RandomWipe]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2005/09/11/randomwipe/"/>
    <updated>2005-09-11T20:39:00-04:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2005/09/11/randomwipe</id>
    <content type="html"><![CDATA[<p>I'm in the process of getting rid of a bunch of stuff laying around the
house.  One of these things that I'll never use again is my Parallel Port
zip drive.  In fact, I haven't been able to use it for the last three years
because I lost the power supply.  Last spring, <a href="http://www.epp.cmu.edu/">my department</a> was giving away some stuff, and one of them was a zip drive.
At the time I thought it was another parallel port one, but really it was
a SCSI one, with the 25 pin scsi connector, which is the exact same thing
as a parallel cable.  Anyway, long story short, I've been using the power
supply from the SCSI drive to power my parallel port drive and then dump the
data that's relevant back to my hard disk.</p>

<p>Some of this stuff is personal stuff, photos from college that I already
have stored elsewhere, letters, etc.  Some of it is old stuff from when I
worked at <a href="http://www.lecltd.com/">LEC Ltd</a> and <a href="http://www.mypoints.com/">MyPoints</a>, and some of it is REALLY old -- like my phone
listing from Telemate 4.22 and Telix 3.11; apparently the Gate's three lines
were 858-8218, 858-8219, and 858-8260.  In any case, I'm not so silly
as to think that moving the files off the disks really deletes them (see
<a href="http://www.simson.net/clips/2003/2003.CSO.04.Hard_disk_risk.htm">this article by Simson Garfinkel</a> or <a href="http://news.bbc.co.uk/2/hi/technology/4229550.stm">this article from the BBC</a> for more info).</p>

<p>Of course, the proper solution is to do <code>dd if=/dev/random of=/dev/sda4</code> a couple of times.  But this is really slow.  You can speed
it up by doing <code>dd if=/dev/urandom of=/dev/sda4</code>, and
just hope that no one cracks the pseudo-random nature of <code>/dev/urandom</code>.  But
this still can't deal with the issue that my parallel port zip drive is REALLY
REALLY slow.  I'm lazy, impatient, and most importantly, intolerant of my
system coming to a crawl while dumping data to the parallel port.</p>

<p>The next step was to try some big magnets.  My father-in-law repairs appliances
and gave us a bunch of microwave magnetron magnets.  They're mega strong.  I
piled them around the disks and shuffled the pile for a few minutes, but the
disks still read.  I'm lazy, I just want to make retreiving the data
sufficiently difficult without having to wait forever.  Enter RandomWipe.</p>

<p>RandomWipe is a simple little python script that randomly rewrites locations
on a disk with crap from <code>/dev/urandom</code>.  You can also have it write over the
initial section of the disk too.  Really quite nice.  Here's the code for
RandomWipe, which I place in the public domain and disclaim all warranty on.
Please note, only this snippet of python code below is in the public domain.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">()</span>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&quot;randomwipe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-v&quot;</span><span class="p">,</span><span class="s">&quot;--verbose&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;verbose&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>              <span class="n">help</span><span class="o">=</span><span class="s">&quot;verbose debugging&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">action</span><span class="o">=</span><span class="s">&quot;store_true&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-m&quot;</span><span class="p">,</span><span class="s">&quot;--maxseek&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;maxseek&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>              <span class="n">help</span><span class="o">=</span><span class="s">&quot;maximum seek&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">100000000</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-i&quot;</span><span class="p">,</span><span class="s">&quot;--iterations&quot;</span><span class="p">,</span><span class="n">dest</span><span class="o">=</span><span class="s">&quot;iterations&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>              <span class="n">help</span><span class="o">=</span><span class="s">&quot;iterations&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-b&quot;</span><span class="p">,</span><span class="s">&quot;--blocksize&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;blocksize&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;blocksize&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>              <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-f&quot;</span><span class="p">,</span><span class="s">&quot;--fat&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;fatkiller&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;fat&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>              <span class="n">action</span><span class="o">=</span><span class="s">&quot;store_true&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">verbose</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">log</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">options</span><span class="o">.</span><span class="n">blocksize</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">blocksize</span><span class="p">)</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">iterations</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">iterations</span><span class="p">)</span>
</span><span class='line'><span class="n">options</span><span class="o">.</span><span class="n">maxseek</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">maxseek</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Usage: randomwipe [OPTIONS] device&quot;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">f1</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">f2</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/dev/urandom&quot;</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">fatkiller</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">f1</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">f1</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f2</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="mi">1024</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">iterations</span><span class="p">):</span>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">verbose</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;writing count: </span><span class="si">%d</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">x</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;writing count: </span><span class="si">%d</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">f1</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">options</span><span class="o">.</span><span class="n">maxseek</span><span class="o">-</span><span class="n">options</span><span class="o">.</span><span class="n">blocksize</span><span class="p">))</span>
</span><span class='line'><span class="n">f1</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f2</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">blocksize</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">f1</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">f2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I've been running it using the following set of commands:
<code>python randomwipe.py /dev/sda4 -b 4096 -i 500 -f &amp;&amp; mount -t vfat /dev/sda4 /mnt/image &amp;&amp; umount /dev/sda4; mkfs.vfat /dev/sda4</code>.
This basically goes and writes 4096 bytes of random data in 500 different
locations on the disk and additionally blows away the beginning of the file
allocation table.  It then attempts a mount just to make sure and finally
creates a new filesystem on the disk.  I can process a disk in about a minute
like this with a reasonable assurance of security (what I call good enough).</p>

<p>As an aside, if you're interested in the drives (parallel and scsi) along with
14 100MB disks, let me know.  I give discounts to blog readers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python and DBus]]></title>
    <link href="http://patrick.wagstrom.net/weblog/2004/12/01/pythondbus/"/>
    <updated>2004-12-01T16:33:00-05:00</updated>
    <id>http://patrick.wagstrom.net/weblog/2004/12/01/pythondbus</id>
    <content type="html"><![CDATA[<p>I found <a href="http://s1x.homelinux.net/documents/python/hal-listing-devs">this article</a> about how to
list devices using hal and dbus from Python, however, I couldn't get it to work properly.  After some hacking
I managed to get a little script working to list all the ethernet devices.</p>

<pre><code>&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;import&lt;/span&gt;&lt;/span&gt; dbus
bus &lt;span style="color: #990000"&gt;=&lt;/span&gt; dbus&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;Bus&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;dbus&lt;span style="color: #990000"&gt;.&lt;/span&gt;Bus&lt;span style="color: #990000"&gt;.&lt;/span&gt;TYPE_SYSTEM&lt;span style="color: #990000"&gt;)&lt;/span&gt;
hal_service &lt;span style="color: #990000"&gt;=&lt;/span&gt; bus&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_service&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"org.freedesktop.Hal"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
hal_manager &lt;span style="color: #990000"&gt;=&lt;/span&gt; hal_service&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_object&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"/org/freedesktop/Hal/Manager"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;"org.freedesktop.Hal.Manager"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
eth_devs &lt;span style="color: #990000"&gt;=&lt;/span&gt; hal_manager&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;FindDeviceByCapability&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"net"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;for&lt;/span&gt;&lt;/span&gt; dev_uri &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;in&lt;/span&gt;&lt;/span&gt; eth_devs&lt;span style="color: #990000"&gt;:&lt;/span&gt;
    dev &lt;span style="color: #990000"&gt;=&lt;/span&gt; hal_service&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_object&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;dev_uri&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;"org.freedesktop.Hal.Device"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    iface &lt;span style="color: #990000"&gt;=&lt;/span&gt; dev&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;GetPropertyString&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"net.interface"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    prod &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;""&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;try&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
        prod &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;"("&lt;/span&gt; &lt;span style="color: #990000"&gt;+&lt;/span&gt; dev&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;GetPropertyString&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"info.product"&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #990000"&gt;+&lt;/span&gt; &lt;span style="color: #FF0000"&gt;")"&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;except&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;print&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #FF0000"&gt;"%s - %s"&lt;/span&gt; &lt;span style="color: #990000"&gt;%&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;iface&lt;span style="color: #990000"&gt;,&lt;/span&gt; prod&lt;span style="color: #990000"&gt;)&lt;/span&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
