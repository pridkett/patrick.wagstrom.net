Hiding Pyblosxom with Mod_rewrite

<!-- Date: 2003-10-31 09:16 -->
<p>
One of the more interesting things about pyblosxom is that it's all based off
a single URL and data is passed to it in the form of a path rather than all on
the hook.  Anyway, this means that unless you want a nasty looking path like
<my:verbatim>http://patrick.wagstrom.net/pyblosxom/pyblosxom.cgi/2003/oct</my:verbatim>
then you need to do something to hide it.  There are a few hints that talk
about hiding stuff.  But I think that I'd rather do it a more robust way than
just renaming the CGI as something like blog.
</p>

<p>
So the better way to do it is with mod_rewrite.  This not only allows you to hide the weblog
under a better URL, but also allows you to completely deny access to items underneath your
pyblosxom file tree.  Here's the snippet I used on my website:
</p>

<pre>&lt;IfModule mod_rewrite.c&gt;
	RewriteEngine on
	RewriteRule ^/weblog/?$ /pyblosxom/pyblosxom.cgi [L]
	RewriteRule ^/weblog/(.+) /pyblosxom/pyblosxom.cgi/$1 [L]
	RewriteRule ^/pyblosxom/(.+) /weblog/$1 [R,L]
&lt;/IfModule&gt;
</pre>

<p>
Simply put, this redirects any request for the url
<my:verbatim>/weblog</my:verbatim> or <my:verbatim>/weblog/</my:verbatim>
to the file <my:verbatim>/pyblosxom/pyblosxom.cgi</my:verbatim>.  It also
redirects any request for a subdirectory of <my:verbatim>weblog</my:verbatim>
to the CGI and appends the rest of the URL to it.  Finally, if there is ever
a direct request to the URL for the CGI then it will use a HTTP redirect to
point the user to the weblog link.  This means that the only way to get access
files that actually live under <my:verbatim>/pyblosxom</my:verbatim> is through the CGI.
</p>
